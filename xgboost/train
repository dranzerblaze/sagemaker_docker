#!/usr/bin/env python3.5

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback

import numpy as np
import pandas as pd
import random
import sys 
 # linear algebra
from scipy.stats import randint as randint2
 # data processing, CSV file I/O (e.g. pd.read_csv), data manipulation as in SQL
import matplotlib.pyplot as plt # this is used for the plot the graph used for plot interactive graph. 
from sklearn.model_selection import train_test_split # to split the data into two parts
from sklearn.preprocessing import StandardScaler # for normalization
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline # pipeline making
from sklearn.model_selection import cross_val_score
from sklearn.feature_selection import SelectFromModel
from sklearn import metrics # for the check the error and accuracy of the model
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.ensemble import RandomForestRegressor


# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:

        # Take the set of files and read them all into a single pandas dataframe
        input_file = os.path.join(training_path, 'data.csv')
        if len(input_file) == 0:
            raise ValueError(('There are no files in {}.\n' +
                              'This usually indicates that the channel ({}) was incorrectly specified,\n' +
                              'the data specification in S3 was incorrectly specified or the role specified\n' +
                              'does not have permission to access the data.').format(training_path, channel_name))
       # path_to_data_file = input_path +'/training/data.csv'
       # print (training_path)
        data = pd.read_csv(input_file)
        #train_data = pd.concat(raw_data)
        #data = train_data
        print ( data.head())
        #data['Timestamp'] = pd.to_datetime(data['Timestamp'])
        #data = data.drop(['Timestamp'],axis=1)
        y_train = data["Next Day CPC"]
        x_train = data.drop(['Next Day CPC','Keywords'], axis=1)
        x_keywords = []
        for i in range(len(x_train)):
            x_keywords.append(random.randint(0,9))
        x_train['Keywords'] = x_keywords
        x_df_train, x_df_test = train_test_split(x_train, train_size = 0.8, test_size = 0.2)
        y_df_train, y_df_test = train_test_split(y_train, train_size = 0.8, test_size = 0.2)
        clf = RandomForestRegressor(n_estimators = 10)
        clf.fit(x_df_train, y_df_train)
        # save the model
        with open(os.path.join(model_path, 'xgboost-model.pkl'), 'wb') as out:
            pickle.dump(clf, out, protocol=0)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
